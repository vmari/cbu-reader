{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["validarCBU","cbu","length","validarLargoCBU","codigo","banco","substr","digitoVerificador1","sucursal","digitoVerificador2","validarCodigoBanco","cuenta","digitoVerificador","validarCuenta","bancos","getBanco","App","useState","cbus","setCBUs","status","setStatus","progress","setProgress","recognize","file","a","Tesseract","tessedit_char_whitelist","logger","m","console","log","data","text","detectedCBUs","match","list","Set","filter","className","config","postUrl","eventHandlers","addedfile","djsConfig","autoProcessQueue","multiple","class","style","width","map","value","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f28330b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nimport 'react-dropzone-component/styles/filepicker.css'\nimport 'dropzone/dist/min/dropzone.min.css'\n\nimport Tesseract from 'tesseract.js';\n\nimport DropzoneComponent from 'react-dropzone-component';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nfunction validarLargoCBU(cbu) {\n  if (cbu.length != 22) { return false }\n  return true\n}\n\nfunction validarCodigoBanco(codigo) {\n  if (codigo.length != 8) { return false }\n  var banco = codigo.substr(0, 3)\n  var digitoVerificador1 = codigo[3]\n  var sucursal = codigo.substr(4, 3)\n  var digitoVerificador2 = codigo[7]\n\n  var suma = banco[0] * 7 + banco[1] * 1 + banco[2] * 3 + digitoVerificador1 * 9 + sucursal[0] * 7 + sucursal[1] * 1 + sucursal[2] * 3\n\n  var diferencia = 10 - (suma % 10)\n\n  return diferencia == digitoVerificador2\n}\n\nfunction validarCuenta(cuenta) {\n  if (cuenta.length != 14) { return false }\n  var digitoVerificador = cuenta[13]\n  var suma = cuenta[0] * 3 + cuenta[1] * 9 + cuenta[2] * 7 + cuenta[3] * 1 + cuenta[4] * 3 + cuenta[5] * 9 + cuenta[6] * 7 + cuenta[7] * 1 + cuenta[8] * 3 + cuenta[9] * 9 + cuenta[10] * 7 + cuenta[11] * 1 + cuenta[12] * 3\n  var diferencia = 10 - (suma % 10)\n  return diferencia == digitoVerificador\n}\n\nfunction validarCBU(cbu) {\n  return validarLargoCBU(cbu) && validarCodigoBanco(cbu.substr(0, 8)) && validarCuenta(cbu.substr(8, 14))\n}\n\nconst bancos = {\n  '005': 'The Royal Bank of Scotland N.V.',\n  '007': 'Banco de Galicia y Buenos Aires S.A.',\n  '011': 'Banco de la Nación Argentina',\n  '014': 'Banco de la Provincia de Buenos Aires',\n  '015': 'Industrial and Commercial Bank of China S.A.',\n  '016': 'Citibank N.A.',\n  '017': 'BBVA Banco Francés S.A.',\n  '018': 'The Bank of Tokyo-Mitsubishi UFJ, LTD.',\n  '020': 'Banco de la Provincia de Córdoba S.A.',\n  '027': 'Banco Supervielle S.A.',\n  '029': 'Banco de la Ciudad de Buenos Aires',\n  '030': 'Central de la República Argentina',\n  '034': 'Banco Patagonia S.A.',\n  '044': 'Banco Hipotecario S.A.',\n  '045': 'Banco de San Juan S.A.',\n  '046': 'Banco do Brasil S.A.',\n  '060': 'Banco de Tucumán S.A.',\n  '065': 'Banco Municipal de Rosario',\n  '072': 'Banco Santander Río S.A.',\n  '083': 'Banco del Chubut S.A.',\n  '086': 'Banco de Santa Cruz S.A.',\n  '093': 'Banco de la Pampa Sociedad de Economía Mixta',\n  '094': 'Banco de Corrientes S.A.',\n  '097': 'Banco Provincia del Neuquén S.A.',\n  '143': 'Brubank S.A.U.',\n  '147': 'Banco Interfinanzas S.A.',\n  '150': 'HSBC Bank Argentina S.A.',\n  '165': 'JP Morgan Chase Bank NA (Sucursal Buenos Aires)',\n  '191': 'Banco Credicoop Cooperativo Limitado',\n  '198': 'Banco de Valores S.A.',\n  '247': 'Banco Roela S.A.',\n  '254': 'Banco Mariva S.A.ī',\n  '259': 'Banco Itaú Argentina S.A.',\n  '262': 'Bank of America National Association',\n  '266': 'BNP Paribas',\n  '268': 'Banco Provincia de Tierra del Fuego',\n  '269': 'Banco de la República Oriental del Uruguay',\n  '277': 'Banco Sáenz S.A.',\n  '281': 'Banco Meridian S.A.',\n  '285': 'Banco Macro S.A.',\n  '295': 'American Express Bank LTD. S.A.',\n  '299': 'Banco Comafi S.A.',\n  '300': 'Banco de Inversión y Comercio Exterior S.A.',\n  '301': 'Banco Piano S.A.',\n  '305': 'Banco Julio S.A.',\n  '309': 'Nuevo Banco de la Rioja S.A.',\n  '310': 'Banco del Sol S.A.',\n  '311': 'Nuevo Banco del Chaco S.A.',\n  '312': 'MBA Lazard Banco de Inversiones S.A.',\n  '315': 'Banco de Formosa S.A.',\n  '319': 'Banco CMF S.A.',\n  '321': 'Banco de Santiago del Estero S.A.',\n  '322': 'Banco Industrial S.A.',\n  '325': 'Deutsche Bank S.A.',\n  '330': 'Nuevo Banco de Santa Fe S.A.',\n  '331': 'Banco Cetelem Argentina S.A.',\n  '332': 'Banco de Servicios Financieros S.A.',\n  '336': 'Banco Bradesco Argentina S.A.',\n  '338': 'Banco de Servicios y Transacciones S.A.',\n  '339': 'RCI Banque S.A.',\n  '340': 'BACS Banco de Crédito y Securitización S.A.',\n  '341': 'Más Ventas S.A.',\n  '384': 'Wilobank S.A.',\n  '386': 'Nuevo Banco de Entre Ríos S.A.',\n  '389': 'Banco Columbia S.A.',\n  '405': 'Ford Credit Compañía Financiera S.A.',\n  '406': 'Metrópolis Compañía Financiera S.A.',\n  '408': 'Compañía Financiera Argentina S.A.',\n  '413': 'Montemar Compañía Financiera S.A.',\n  '415': 'Transatlántica Compañía Financiera S.A.',\n  '428': 'Caja de Crédito Coop. La Capital del Plata LTDA.',\n  '431': 'Banco Coinag S.A.',\n  '432': 'Banco de Comercio S.A.',\n  '434': 'Caja de Crédito Cuenca Coop. LTDA.',\n  '437': 'Volkswagen Credit Compañía Financiera S.A.',\n  '438': 'Cordial Compañía Financiera S.A.',\n  '440': 'Fiat Crédito Compañía Financiera S.A.',\n  '441': 'GPAT Compañía Financiera S.A.',\n  '442': 'Mercedes-Benz Compañía Financiera Argentina S.A.',\n  '443': 'Rombo Compañía Financiera S.A.',\n  '444': 'John Deere Credit Compañía Financiera S.A.',\n  '445': 'PSA Finance Argentina Compañía Financiera S.A.',\n  '446': 'Toyota Compañía Financiera de Argentina S.A.',\n  '448': 'Finandino Compañía Financiera S.A.',\n  '992': 'Provincanje S.A.',\n};\n\nfunction getBanco(cbu) {\n  return bancos[cbu.substr(0, 3)] || '';\n}\n\nfunction App() {\n  const [cbus, setCBUs] = useState([]);\n  const [status, setStatus] = useState('');\n  const [progress, setProgress] = useState(false);\n\n  const addCBUs = (list) => setCBUs([...list, ...cbus])\n\n  const recognize = async (file) => {\n    const { data } = await Tesseract.recognize(\n      file,\n      'eng',\n      {\n        tessedit_char_whitelist: '0123456789',\n        logger: m => {\n          if (m.progress) {\n            setProgress(m.progress);\n          }\n          if (m.status) {\n            setStatus(m.status);\n          }\n          console.log(m)\n        }\n      }\n    )\n    console.log(data.text);\n    const detectedCBUs = data.text.match(/\\d{22}/g);\n    if (detectedCBUs) {\n      addCBUs([...new Set(detectedCBUs.filter(validarCBU))]);\n    }\n  }\n\n\n  return (\n    <div className=\"content\">\n      <h1>CBU reader</h1>\n      <p>Leer CBU desde una screenshot (captura de pantalla) y copiarlo</p>\n\n      <DropzoneComponent config={{ postUrl: 'no-url' }}\n        eventHandlers={{ addedfile: async (file) => { await recognize(file); } }}\n        djsConfig={{\n          autoProcessQueue: false, multiple: false\n        }} />\n\n      {progress > 0 && progress < 1 &&\n        <div className=\"status\">\n          <p>{status}</p>\n          <div class=\"progress\">\n            <div class=\"progress-bar-blue\" style={{ width: `${progress * 100}%` }}></div>\n          </div>\n        </div>\n      }\n\n      {!!cbus.length &&\n        <div className=\"results\">\n          <h2>Resultados</h2>\n          {cbus.map(cbu => <>\n            <p>{getBanco(cbu)}</p>\n            <div>\n              <input value={cbu} readOnly />\n              <CopyToClipboard text={cbu}>\n                <button>Copiar</button>\n              </CopyToClipboard>\n            </div>\n          </>)}\n        </div>\n      }\n\n      <p className=\"disclaimer\">La app se ejecuta en el cliente y no almacena ningún dato ni se transmite\n        por la red.<br /> Por debajo utiliza un modelo de OCR de tesseract.js</p>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}